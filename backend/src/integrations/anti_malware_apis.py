"""
Anti-Malware APIs Wrapper for ScamShield AI
Integrates critical anti-malware and threat detection APIs
"""

import asyncio
from typing import Dict, Any, Optional, List
from .base_api import BaseAPIWrapper, APIConfig, APIResponse
import logging
import hashlib
import base64

logger = logging.getLogger(__name__)

class AntiMalwareAPIWrapper(BaseAPIWrapper):
    """Wrapper for anti-malware and threat detection APIs"""
    
    def __init__(self, api_keys: Dict[str, str] = None):
        super().__init__(APIConfig(
            name="AntiMalwareAPIs",
            base_url="https://api.antimalware.com",
            rate_limit=60
        ))
        
        self.api_keys = api_keys or {}
        self.apis = self._initialize_apis()
    
    def _initialize_apis(self) -> Dict[str, APIConfig]:
        """Initialize all anti-malware API configurations"""
        return {
            'alienvault_otx': APIConfig(
                name='AlienVault OTX',
                base_url='https://otx.alienvault.com/api/v1',
                api_key=self.api_keys.get('alienvault_otx'),
                rate_limit=1000,
                cache_ttl=3600,
                requires_auth=True
            ),
            'maldatabase': APIConfig(
                name='MalDatabase',
                base_url='https://maldatabase.com/api',
                api_key=self.api_keys.get('maldatabase'),
                rate_limit=100,
                cache_ttl=3600,
                requires_auth=True
            ),
            'phisherman': APIConfig(
                name='Phisherman',
                base_url='https://api.phisherman.gg/v1',
                api_key=self.api_keys.get('phisherman'),
                rate_limit=1000,
                cache_ttl=1800,
                requires_auth=True
            ),
            'web_of_trust': APIConfig(
                name='Web of Trust',
                base_url='https://api.mywot.com/0.4',
                api_key=self.api_keys.get('web_of_trust'),
                rate_limit=10000,
                cache_ttl=3600,
                requires_auth=True
            ),
            'urlhaus': APIConfig(
                name='URLhaus',
                base_url='https://urlhaus-api.abuse.ch/v1',
                api_key=None,  # No auth required
                rate_limit=1000,
                cache_ttl=1800,
                requires_auth=False
            ),
            'malwarebazaar': APIConfig(
                name='MalwareBazaar',
                base_url='https://mb-api.abuse.ch/api/v1',
                api_key=None,  # No auth required
                rate_limit=1000,
                cache_ttl=3600,
                requires_auth=False
            ),
            'malshare': APIConfig(
                name='MalShare',
                base_url='https://malshare.com/api.php',
                api_key=self.api_keys.get('malshare'),
                rate_limit=1000,
                cache_ttl=3600,
                requires_auth=True
            ),
            'scanii': APIConfig(
                name='Scanii',
                base_url='https://api.scanii.com/v2.1',
                api_key=self.api_keys.get('scanii'),
                rate_limit=100,
                cache_ttl=1800,
                requires_auth=True
            ),
            'nophishy': APIConfig(
                name='NoPhishy',
                base_url='https://api.nophishy.com/v1',
                api_key=self.api_keys.get('nophishy'),
                rate_limit=1000,
                cache_ttl=1800,
                requires_auth=True
            )
        }
    
    def get_auth_header_name(self) -> str:
        """Get authentication header name"""
        return 'X-API-Key'
    
    async def health_check(self) -> APIResponse:
        """Check health of all anti-malware APIs"""
        results = {}
        
        # Test URLhaus (no auth required)
        try:
            response = await self.check_url_reputation('https://example.com')
            results['urlhaus'] = response.success
        except:
            results['urlhaus'] = False
        
        return APIResponse(
            success=True,
            data={'health_status': results},
            api_name='AntiMalwareAPIs'
        )
    
    async def check_url_reputation(self, url: str) -> APIResponse:
        """Check URL reputation across multiple anti-malware APIs"""
        results = {}
        
        # URLhaus (free, no auth)
        try:
            self.config = self.apis['urlhaus']
            response = await self.make_request(
                'url/',
                method='POST',
                data={'url': url}
            )
            if response.success:
                data = response.data
                results['urlhaus'] = {
                    'query_status': data.get('query_status'),
                    'url_status': data.get('url_status'),
                    'threat': data.get('threat'),
                    'blacklists': data.get('blacklists', {}),
                    'reporter': data.get('reporter'),
                    'larted': data.get('larted'),
                    'takedown_time_seconds': data.get('takedown_time_seconds')
                }
        except Exception as e:
            logger.error(f"URLhaus error: {e}")
            results['urlhaus'] = {'error': str(e)}
        
        # Phisherman
        if 'phisherman' in self.api_keys:
            try:
                self.config = self.apis['phisherman']
                response = await self.make_request(
                    'domains/info/' + url.replace('https://', '').replace('http://', '').split('/')[0]
                )
                if response.success:
                    data = response.data
                    results['phisherman'] = {
                        'classification': data.get('classification'),
                        'verifiedPhish': data.get('verifiedPhish', False),
                        'phishCaught': data.get('phishCaught'),
                        'details': data.get('details', {}),
                        'targetedBrand': data.get('targetedBrand'),
                        'phishTank': data.get('phishTank', False)
                    }
            except Exception as e:
                logger.error(f"Phisherman error: {e}")
                results['phisherman'] = {'error': str(e)}
        
        # Web of Trust
        if 'web_of_trust' in self.api_keys:
            try:
                self.config = self.apis['web_of_trust']
                domain = url.replace('https://', '').replace('http://', '').split('/')[0]
                response = await self.make_request(
                    f'public_link_json2',
                    params={
                        'hosts': domain,
                        'callback': '',
                        'key': self.api_keys.get('web_of_trust')
                    }
                )
                if response.success:
                    data = response.data
                    if domain in data:
                        domain_data = data[domain]
                        results['web_of_trust'] = {
                            'reputation': domain_data.get('0', [0, 0])[0],  # Trustworthiness
                            'confidence': domain_data.get('0', [0, 0])[1],
                            'child_safety': domain_data.get('4', [0, 0])[0],
                            'categories': domain_data.get('categories', {}),
                            'blacklists': domain_data.get('blacklists', {})
                        }
            except Exception as e:
                logger.error(f"Web of Trust error: {e}")
                results['web_of_trust'] = {'error': str(e)}
        
        # NoPhishy
        if 'nophishy' in self.api_keys:
            try:
                self.config = self.apis['nophishy']
                response = await self.make_request(
                    'check',
                    params={'url': url}
                )
                if response.success:
                    data = response.data
                    results['nophishy'] = {
                        'is_phishing': data.get('isPhishing', False),
                        'confidence': data.get('confidence', 0),
                        'category': data.get('category'),
                        'brand': data.get('brand'),
                        'screenshot_url': data.get('screenshotUrl')
                    }
            except Exception as e:
                logger.error(f"NoPhishy error: {e}")
                results['nophishy'] = {'error': str(e)}
        
        # Calculate overall URL risk score
        url_risk = 0
        threat_indicators = 0
        
        if 'urlhaus' in results:
            urlhaus_data = results['urlhaus']
            if urlhaus_data.get('url_status') == 'online':
                url_risk += 80
                threat_indicators += 1
            elif urlhaus_data.get('url_status') == 'offline':
                url_risk += 40
        
        if 'phisherman' in results:
            phish_data = results['phisherman']
            if phish_data.get('verifiedPhish'):
                url_risk += 90
                threat_indicators += 1
            elif phish_data.get('phishTank'):
                url_risk += 70
                threat_indicators += 1
        
        if 'web_of_trust' in results:
            wot_data = results['web_of_trust']
            reputation = wot_data.get('reputation', 50)
            if reputation < 20:
                url_risk += 60
                threat_indicators += 1
            elif reputation < 40:
                url_risk += 30
        
        if 'nophishy' in results:
            nophishy_data = results['nophishy']
            if nophishy_data.get('is_phishing'):
                confidence = nophishy_data.get('confidence', 0)
                url_risk += confidence
                if confidence > 70:
                    threat_indicators += 1
        
        # Normalize risk score
        if threat_indicators > 0:
            url_risk = min(100, url_risk / max(1, threat_indicators))
        else:
            url_risk = min(100, url_risk)
        
        return APIResponse(
            success=True,
            data={
                'url': url,
                'risk_score': url_risk,
                'risk_level': 'HIGH' if url_risk > 70 else 'MEDIUM' if url_risk > 30 else 'LOW',
                'threat_indicators': threat_indicators,
                'detailed_results': results,
                'recommendation': self._get_url_recommendation(url_risk, threat_indicators, results)
            },
            api_name='AntiMalwareAPIs'
        )
    
    async def check_file_hash(self, file_hash: str, hash_type: str = 'sha256') -> APIResponse:
        """Check file hash against malware databases"""
        results = {}
        
        # MalwareBazaar (free, no auth)
        try:
            self.config = self.apis['malwarebazaar']
            response = await self.make_request(
                '',
                method='POST',
                data={
                    'query': 'get_info',
                    'hash': file_hash
                }
            )
            if response.success:
                data = response.data
                if data.get('query_status') == 'ok':
                    results['malwarebazaar'] = {
                        'malware_found': True,
                        'signature': data.get('data', [{}])[0].get('signature'),
                        'file_type': data.get('data', [{}])[0].get('file_type'),
                        'file_size': data.get('data', [{}])[0].get('file_size'),
                        'first_seen': data.get('data', [{}])[0].get('first_seen'),
                        'last_seen': data.get('data', [{}])[0].get('last_seen'),
                        'reporter': data.get('data', [{}])[0].get('reporter'),
                        'intelligence': data.get('data', [{}])[0].get('intelligence', {})
                    }
                else:
                    results['malwarebazaar'] = {'malware_found': False}
        except Exception as e:
            logger.error(f"MalwareBazaar error: {e}")
            results['malwarebazaar'] = {'error': str(e)}
        
        # MalShare
        if 'malshare' in self.api_keys:
            try:
                self.config = self.apis['malshare']
                response = await self.make_request(
                    '',
                    params={
                        'api_key': self.api_keys.get('malshare'),
                        'action': 'details',
                        'hash': file_hash
                    }
                )
                if response.success:
                    data = response.data
                    results['malshare'] = {
                        'malware_found': 'ERROR' not in str(data),
                        'details': data if 'ERROR' not in str(data) else None,
                        'file_type': data.get('F_TYPE') if 'ERROR' not in str(data) else None,
                        'sources': data.get('SOURCES') if 'ERROR' not in str(data) else None
                    }
            except Exception as e:
                logger.error(f"MalShare error: {e}")
                results['malshare'] = {'error': str(e)}
        
        # AlienVault OTX
        if 'alienvault_otx' in self.api_keys:
            try:
                self.config = self.apis['alienvault_otx']
                response = await self.make_request(f'indicators/file/{file_hash}/general')
                if response.success:
                    data = response.data
                    results['alienvault_otx'] = {
                        'pulse_info': data.get('pulse_info', {}),
                        'malware_families': data.get('malware_families', []),
                        'analysis': data.get('analysis', {}),
                        'reputation': data.get('reputation', 0)
                    }
            except Exception as e:
                logger.error(f"AlienVault OTX error: {e}")
                results['alienvault_otx'] = {'error': str(e)}
        
        # Calculate malware risk score
        malware_risk = 0
        malware_found = False
        
        for api_name, api_result in results.items():
            if api_result.get('malware_found'):
                malware_found = True
                malware_risk = 100
                break
        
        if not malware_found:
            # Check for suspicious indicators
            if 'alienvault_otx' in results:
                otx_data = results['alienvault_otx']
                pulse_count = len(otx_data.get('pulse_info', {}).get('pulses', []))
                if pulse_count > 0:
                    malware_risk = min(80, pulse_count * 20)
        
        return APIResponse(
            success=True,
            data={
                'file_hash': file_hash,
                'hash_type': hash_type,
                'malware_detected': malware_found,
                'risk_score': malware_risk,
                'risk_level': 'HIGH' if malware_risk > 70 else 'MEDIUM' if malware_risk > 30 else 'LOW',
                'detailed_results': results,
                'recommendation': self._get_file_recommendation(malware_risk, malware_found, results)
            },
            api_name='AntiMalwareAPIs'
        )
    
    async def scan_file_content(self, file_content: bytes, filename: str) -> APIResponse:
        """Scan file content for malware"""
        results = {}
        
        # Scanii
        if 'scanii' in self.api_keys:
            try:
                self.config = self.apis['scanii']
                
                # Prepare file for upload
                files = {'file': (filename, file_content)}
                
                # Note: This would require multipart/form-data handling
                # For now, we'll simulate the response structure
                results['scanii'] = {
                    'scan_initiated': True,
                    'note': 'File scanning requires multipart upload - implementation pending'
                }
                
            except Exception as e:
                logger.error(f"Scanii error: {e}")
                results['scanii'] = {'error': str(e)}
        
        # Calculate file hash for other checks
        file_hash = hashlib.sha256(file_content).hexdigest()
        hash_result = await self.check_file_hash(file_hash)
        
        if hash_result.success:
            results['hash_analysis'] = hash_result.data
        
        return APIResponse(
            success=True,
            data={
                'filename': filename,
                'file_size': len(file_content),
                'file_hash': file_hash,
                'scan_results': results,
                'recommendation': 'File analysis completed. Check hash_analysis for malware detection results.'
            },
            api_name='AntiMalwareAPIs'
        )
    
    async def get_threat_intelligence(self, indicator: str, indicator_type: str) -> APIResponse:
        """Get threat intelligence for various indicators"""
        results = {}
        
        # AlienVault OTX
        if 'alienvault_otx' in self.api_keys:
            try:
                self.config = self.apis['alienvault_otx']
                
                # Map indicator types to OTX endpoints
                endpoint_map = {
                    'ip': f'indicators/IPv4/{indicator}/general',
                    'domain': f'indicators/domain/{indicator}/general',
                    'url': f'indicators/url/{indicator}/general',
                    'file_hash': f'indicators/file/{indicator}/general'
                }
                
                if indicator_type in endpoint_map:
                    response = await self.make_request(endpoint_map[indicator_type])
                    if response.success:
                        data = response.data
                        results['alienvault_otx'] = {
                            'pulse_info': data.get('pulse_info', {}),
                            'reputation': data.get('reputation', 0),
                            'analysis': data.get('analysis', {}),
                            'malware_families': data.get('malware_families', []),
                            'whois': data.get('whois') if indicator_type == 'domain' else None
                        }
            except Exception as e:
                logger.error(f"AlienVault OTX error: {e}")
                results['alienvault_otx'] = {'error': str(e)}
        
        # MalDatabase
        if 'maldatabase' in self.api_keys:
            try:
                self.config = self.apis['maldatabase']
                response = await self.make_request(
                    'search',
                    params={
                        'query': indicator,
                        'type': indicator_type
                    }
                )
                if response.success:
                    data = response.data
                    results['maldatabase'] = {
                        'matches': data.get('matches', []),
                        'total_results': data.get('total', 0),
                        'threat_types': data.get('threat_types', [])
                    }
            except Exception as e:
                logger.error(f"MalDatabase error: {e}")
                results['maldatabase'] = {'error': str(e)}
        
        # Calculate threat intelligence score
        threat_score = 0
        
        if 'alienvault_otx' in results:
            otx_data = results['alienvault_otx']
            pulse_count = len(otx_data.get('pulse_info', {}).get('pulses', []))
            reputation = otx_data.get('reputation', 0)
            
            if pulse_count > 0:
                threat_score += min(50, pulse_count * 10)
            if reputation < 0:
                threat_score += abs(reputation) * 10
        
        if 'maldatabase' in results:
            mal_data = results['maldatabase']
            match_count = mal_data.get('total_results', 0)
            if match_count > 0:
                threat_score += min(60, match_count * 20)
        
        threat_score = min(100, threat_score)
        
        return APIResponse(
            success=True,
            data={
                'indicator': indicator,
                'indicator_type': indicator_type,
                'threat_score': threat_score,
                'threat_level': 'HIGH' if threat_score > 70 else 'MEDIUM' if threat_score > 30 else 'LOW',
                'detailed_results': results,
                'recommendation': self._get_threat_recommendation(threat_score, results)
            },
            api_name='AntiMalwareAPIs'
        )
    
    def _get_url_recommendation(self, risk_score: float, threat_indicators: int, results: Dict) -> str:
        """Generate recommendation based on URL analysis"""
        if risk_score > 70 or threat_indicators >= 2:
            return "HIGH RISK: URL is flagged by multiple threat intelligence sources. Block access immediately."
        elif risk_score > 30 or threat_indicators >= 1:
            return "MEDIUM RISK: URL shows suspicious characteristics. Exercise caution and consider blocking."
        else:
            return "LOW RISK: URL appears clean across threat intelligence sources."
    
    def _get_file_recommendation(self, risk_score: float, malware_found: bool, results: Dict) -> str:
        """Generate recommendation based on file analysis"""
        if malware_found:
            return "HIGH RISK: File is identified as malware by threat intelligence sources. Quarantine immediately."
        elif risk_score > 30:
            return "MEDIUM RISK: File shows suspicious characteristics. Perform additional analysis before execution."
        else:
            return "LOW RISK: File appears clean based on available threat intelligence."
    
    def _get_threat_recommendation(self, threat_score: float, results: Dict) -> str:
        """Generate recommendation based on threat intelligence"""
        if threat_score > 70:
            return "HIGH RISK: Indicator appears in multiple threat intelligence feeds. Investigate immediately."
        elif threat_score > 30:
            return "MEDIUM RISK: Indicator shows some suspicious activity. Monitor closely."
        else:
            return "LOW RISK: Indicator appears clean across threat intelligence sources."
    
    async def comprehensive_malware_check(self, target_data: Dict[str, Any]) -> APIResponse:
        """Perform comprehensive malware check across all available data"""
        results = {}
        
        # Check URLs if provided
        if 'urls' in target_data:
            url_results = []
            for url in target_data['urls']:
                url_result = await self.check_url_reputation(url)
                url_results.append(url_result.data)
            results['url_analysis'] = url_results
        
        # Check file hashes if provided
        if 'file_hashes' in target_data:
            hash_results = []
            for file_hash in target_data['file_hashes']:
                hash_result = await self.check_file_hash(file_hash)
                hash_results.append(hash_result.data)
            results['file_analysis'] = hash_results
        
        # Get threat intelligence for various indicators
        if 'indicators' in target_data:
            intel_results = []
            for indicator_data in target_data['indicators']:
                intel_result = await self.get_threat_intelligence(
                    indicator_data['value'],
                    indicator_data['type']
                )
                intel_results.append(intel_result.data)
            results['threat_intelligence'] = intel_results
        
        # Calculate overall malware risk score
        risk_scores = []
        
        # Collect risk scores from all analyses
        for analysis_type, analysis_data in results.items():
            if isinstance(analysis_data, list):
                for item in analysis_data:
                    if 'risk_score' in item:
                        risk_scores.append(item['risk_score'])
            elif 'risk_score' in analysis_data:
                risk_scores.append(analysis_data['risk_score'])
        
        overall_risk = max(risk_scores) if risk_scores else 0  # Use highest risk score
        
        return APIResponse(
            success=True,
            data={
                'overall_risk_score': overall_risk,
                'overall_risk_level': 'HIGH' if overall_risk > 70 else 'MEDIUM' if overall_risk > 30 else 'LOW',
                'detailed_analysis': results,
                'summary': self._generate_malware_summary(overall_risk, results),
                'recommendations': self._generate_malware_recommendations(results)
            },
            api_name='AntiMalwareAPIs'
        )
    
    def _generate_malware_summary(self, overall_risk: float, results: Dict) -> str:
        """Generate comprehensive malware analysis summary"""
        high_risk_items = []
        malware_detected = False
        
        for analysis_type, analysis_data in results.items():
            if isinstance(analysis_data, list):
                for item in analysis_data:
                    if item.get('risk_level') == 'HIGH' or item.get('malware_detected'):
                        high_risk_items.append(f"{analysis_type}: {item.get('url', item.get('file_hash', 'unknown'))}")
                        if item.get('malware_detected'):
                            malware_detected = True
            elif analysis_data.get('risk_level') == 'HIGH' or analysis_data.get('malware_detected'):
                high_risk_items.append(analysis_type)
                if analysis_data.get('malware_detected'):
                    malware_detected = True
        
        summary = f"Overall Malware Risk: {overall_risk:.1f}/100 "
        
        if malware_detected:
            summary += "| MALWARE DETECTED "
        
        if high_risk_items:
            summary += f"| HIGH RISK items: {len(high_risk_items)} "
        
        if not high_risk_items and not malware_detected:
            summary += "| All indicators appear clean"
        
        return summary
    
    def _generate_malware_recommendations(self, results: Dict) -> List[str]:
        """Generate list of malware-specific recommendations"""
        recommendations = []
        
        for analysis_type, analysis_data in results.items():
            if isinstance(analysis_data, list):
                for item in analysis_data:
                    if 'recommendation' in item and item.get('risk_level') in ['HIGH', 'MEDIUM']:
                        recommendations.append(f"{analysis_type}: {item['recommendation']}")
            elif 'recommendation' in analysis_data and analysis_data.get('risk_level') in ['HIGH', 'MEDIUM']:
                recommendations.append(f"{analysis_type}: {analysis_data['recommendation']}")
        
        return recommendations

